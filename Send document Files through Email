//utils.web.js
/************
.web.js file
************

Backend '.web.js' files contain functions that run on the server side and can be called from page code.

Learn more at https://dev.wix.com/docs/develop-websites/articles/coding-with-velo/backend-code/web-modules/calling-backend-code-from-the-frontend

****/

/**** Call the sample multiply function below by pasting the following into your page code:

import { multiply } from 'backend/new-module.web';

$w.onReady(async function () {
   console.log(await multiply(4,5));
});

****/

import { Permissions, webMethod } from "wix-web-module";
import { triggeredEmails } from "wix-crm-backend";
import sgMail from '@sendgrid/mail';

export const multiply = webMethod(
    Permissions.Anyone,
    (inputString) => {
        const regex = /wix:image:\/\/v1\/([a-zA-Z0-9_~]+)\.([a-zA-Z0-9]+)\//;
        const match = inputString.match(regex);

        if (match) {
            const mediaId = match[1];
            const extension = match[2];
            return `https://static.wixstatic.com/media/${mediaId}.${extension}`;
        } else {
            return null; // Return null if the input string does not match the expected format
        }
    }
);

export const sendEmailViaSendgrid = webMethod(
    Permissions.Anyone,
    async (payload) => {
        const key = "apikey";
        const senderEmail = "treven2001@yahoo.com";
        const recipient = "treventaylor@gmail.com"; //frontiercsa.mountaineersales@gmail.com //usamamehmood443@gmail.com
        let subject = `CSA ${payload.btn} ${payload.firstName}`;

        let bodyData = `<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CSA Submission</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            padding: 20px;
            background-color: #f9f9f9;
        }
        .container {
            border: 1px solid #ddd;
            padding: 20px;
            background-color: #fff;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .header {
            text-align: center;
            margin-bottom: 20px;
        }
        .details {
            margin-bottom: 20px;
        }
        .details p {
            margin: 5px 0;
        }
        .image-container {
            text-align: center;
        }
        .image-container img {
            max-width: 100%;
            height: auto;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>CSA Submission Details</h1>
        </div>
        <div class="details">
            <p><strong>Contractor Name:</strong> ${payload.contractorName}</p>
            <p><strong>Customer First Name:</strong> ${payload.firstName}</p>
            <p><strong>BTN / New Phone Number:</strong> ${payload.btn}</p>
            <p><strong>Uploaded Image:</strong></p>
        </div>
        <div class="image-container">
            <img src="${payload.formattedUrl}" alt="CSA Image">
        </div>
    </div>
</body>
</html>`;

        sgMail.setApiKey(key);
        const msg = {
            from: { email: senderEmail, name: "Mountaineer Sales" },
            to: recipient,
            subject: subject,
            html: bodyData
        };

        try {
            console.log("Email was sent to via sendgrid");
            return await sgMail.send(msg);
        } catch (error) {
            console.error('Error sending the email: ' + error.message);
            return false;
        }
    }
);

export const sendEmail = webMethod(
    Permissions.Anyone,
    (payload) => {
        sendEmailViaSendgrid(payload);
        return true;
        // let dataToSend = {
        //     variables: {
        //         btn: payload.btn,
        //         firstName: payload.firstName,
        //         lastName: payload.lastName,
        //         contractorName: payload.contractorName,
        //         imageLink: payload.formattedUrl
        //     }
        // }
        // return triggeredEmails
        //     .emailContact('UKO7894', "a7de7f49-89b8-436c-b624-91809383b5ac", dataToSend)
        //     .then(() => {
        //         console.log("Email was sent to contact");
        //     })
        //     .catch((error) => {
        //         console.error(error);
        //     });
    }
);


//mediaUpload.jsw
import { mediaManager } from 'wix-media-backend';

export async function uploadFile(request) {
    try {
        console.log('Request files:', request.files);
        const file = request.files.file;
        
        if (!file) {
            return {
                status: 400,
                body: { error: 'No file provided' }
            };
        }

        const filePath = '/uploads';  // Define the file path or folder where it should be uploaded
        const fileContent = file;     // File content as Buffer
        const fileName = file.name;   // Extract the file name
        const options = {};           // Additional options if needed

        // Upload the file
        const uploadResult = await mediaManager.upload(filePath, fileContent, fileName, options);

        console.log('Upload result:', uploadResult);

        // Return the URL of the uploaded file
        return {
            status: 200,
            body: { url: uploadResult.fileUrl }
        };
    } catch (error) {
        console.error('File upload error:', error);
        return {
            status: 500,
            body: { error: 'File upload failed' }
        };
    }
}

//SendGrid.jsw
import sgMail from '@sendgrid/mail';
import wixSecretsBackend from 'wix-secrets-backend';

function convertWixImageUrl(imageUrl) {
    if (imageUrl.startsWith("wix:image://v1/")) {
        // Extract the media ID and the file extension including the ~mv2 part
        const mediaIdPart = imageUrl.split('/')[3]; // Extract the relevant part after /v1/
        const mediaIdWithVersion = mediaIdPart.split('?')[0]; // Get the media ID and any version (e.g., ~mv2.png)
        
        console.log("Extracted mediaId with version: ", mediaIdWithVersion);

        return `https://static.wixstatic.com/media/${mediaIdWithVersion}`;
    }
    console.log("Non-Wix image URL: ", imageUrl);
    return imageUrl;
}



// Function to send email using SendGrid with an image and formatted HTML
export async function sendEmailWithSendGrid1(toEmail, subject, messageBody, htmlContent, imageUrl) {
    try {
        const apiKey = await wixSecretsBackend.getSecret('sendgrid_api_key');
        sgMail.setApiKey(apiKey);

        // Convert the image URL if it's in the Wix format
        const convertedImageUrl = convertWixImageUrl(imageUrl);
        console.log("Converted Image URL: ", convertedImageUrl);

        // Construct the email body with HTML template and the image tag from your email template
        const bodyData = `
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>${subject}</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        margin: 20px;
                        padding: 20px;
                        background-color: #f9f9f9;
                    }
                    .container {
                        border: 1px solid #ddd;
                        padding: 20px;
                        background-color: #fff;
                        border-radius: 5px;
                        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                    }
                    .header {
                        text-align: center;
                        margin-bottom: 20px;
                    }
                    .details {
                        margin-bottom: 20px;
                    }
                    .details p {
                        margin: 5px 0;
                    }
                    .image-container {
                        text-align: center;
                    }
                    .image-container img {
                        max-width: 100%;
                        height: auto;
                        border: 1px solid #ddd;
                        border-radius: 5px;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="header">
                        <h1>${subject}</h1>
                    </div>
                    <div class="details">
                        ${htmlContent}
                    </div>
                    <div class="image-container">
                        ${convertedImageUrl ? `<img class="max-width" style="display:block; color:#000000; text-decoration:none; font-family:Helvetica, arial, sans-serif; font-size:16px; max-width:100% !important; width:100%; height:auto !important;" src="${convertedImageUrl}" alt="Uploaded Image" />` : '<p>No image provided.</p>'}
                    </div>
                </div>
            </body>
            </html>
        `;

        // Setup the message to send
        const msg = {
            to: toEmail,
            from: { email: 'mountaineersalesco@gmail.com', name: "Mountaineer Sales" }, // Your verified sender email
            subject: subject,
            html: bodyData,
            text: messageBody // Fallback for text email clients
        };

        // Send the email
        const response = await sgMail.send(msg);
        console.log('Email sent successfully');

        return {
            status: 'success',
            message: 'Email sent successfully',
            response: response
        };
    } catch (error) {
        console.error('Error sending email:', error);
        if (error.response) {
            console.error(error.response.body);
        }

        return {
            status: 'error',
            message: 'Error sending email',
            error: error.response ? error.response.body : error.message
        };
    }
}
